CHALLENGE STATEMENT :
********************

A. ORDER BY

	1. Using SQL, list all the songs so that the songs from the same album appear together in track order.

		>> SELECT * FROM songs ORDER BY album, track;
 
B. JOIN
	1. A JOIN clause is used to combine rows from two or more tables, based on a related column between them.
	
		>> SELECT track, title, album FROM songs INNER JOIN albums ON songs.album = albums._id limit 10;
		
		>> SELECT albums.name, artists.name FROM albums, artists WHERE albums.artist = artists._id limit 10;
		   
		>> SELECT songs.track, songs.title AS song_title, albums.album_name 
		   FROM songs INNER JOIN albums 
		   ON songs.album = albums._id ORDER BY albums.album_name, songs.track LIMIT 40;
		
		
C: MINI CHALLENGE:
	1. Produce a list of artists, with their albums, in alphabetical order of artists name.
		
		>> SELECT A.artist_name, B.album_name
           FROM albums AS B
           INNER JOIN artists AS A
           ON A._id = B.artist ORDER BY A.artist_name LIMIT 40;
		   
	2. Produce a list of artists, with their albums and songs, in alphabetical order of artists name.
	
		>> SELECT artists.artist_name, albums.album_name, songs.title AS song_title, songs.track 
           FROM songs
           INNER JOIN albums ON songs.album = albums._id 
		   INNER JOIN artists ON albums.artist = artists._id ORDER BY artist_name, album_name, songs.track LIMIT 100;
		   

	3. Use WHERE clause to filter an album name with "Our time" in it.
	
		>> SELECT artists.artist_name, albums.album_name, songs.title AS song_title, songs.track 
           FROM songs
           INNER JOIN albums ON songs.album = albums._id 
		   INNER JOIN artists ON albums.artist = artists._id 
		   WHERE songs.title LIKE "%doctor%"
		   ORDER BY artist_name, album_name, songs.track LIMIT 100;
		   

VIEWS IN MySQL: 
****************
A view is a virtual table based on the result-set of an SQL statement. 
A view contains rows and columns, just like a real table.

		CREATE VIEW artist_list AS
		   SELECT artists.artist_name, albums.album_name, songs.title AS song_title, songs.track 
           FROM songs
           INNER JOIN albums ON songs.album = albums._id 
		   INNER JOIN artists ON albums.artist = artists._id 
		   WHERE songs.title LIKE "%doctor%"
		   ORDER BY artist_name, album_name, songs.track;
		   
		
		   
		   
		SELECT * FROM artist_list;    // To display the view
		SELECT * FROM artist_list WHERE artist_name LIKE "jefferson%";

	
	
		
FOREIGN KEY CHECKS:
*******************
SET foreign_key_checks = 0;  //To disable referential integrity.
SET foreign_key_checks = 1;   //To enable referential integrity.

		
		
ADDING FOREIGN KEY:
*******************
ALTER TABLE songs ADD INDEX par_ind ( album ); 
ALTER TABLE songs ADD CONSTRAINT fk_album
FOREIGN KEY ( album ) REFERENCES albums ( _id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE albums ADD INDEX par_ind ( artist ); 
ALTER TABLE albums ADD CONSTRAINT fk_artist
FOREIGN KEY ( artist ) REFERENCES artists ( _id ) ON DELETE CASCADE ON UPDATE CASCADE;


		
SHOW CREATE TABLE songs;  // To check all constraints on a table.

SELECT TABLE_NAME, CONSTRAINT_TYPE, CONSTRAINT_NAME
FROM information_schema.table_constraints
WHERE table_name='songs';


CHANGING COLUMN NAME:
*********************
ALTER TABLE albums RENAME COLUMN name TO album_name; 
ALTER TABLE artists RENAME COLUMN name TO artist_name; 


VIEWS:
*******
SHOW FULL TABLES;

SHOW FULL TABLES 
WHERE table_type = 'VIEW';


